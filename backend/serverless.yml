# TODO: Change the name of the org 
org: tahina
app: serverless-todo-app
service: serverless-todo-app

# TODO: serverless-offline serverless-aws-documentation serverless-reqvalidator-plugin serverless-dotenv-plugin
# TODO: try dynamo local?
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline
  - serverless-dotenv-plugin

# https://www.serverless.com/plugins/serverless-dotenv-plugin
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - xray:PutTelemetryRecords
  #       - xray:PutTraceSegments
  #     Resource: "*"

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  # https://github.com/neverendingqs/serverless-dotenv-plugin
  environment:
    TODOS_TABLE: ${env:TODOS_TABLE, 'tahina-todos-dev'}
    TODOS_CREATED_AT_INDEX: ${env:TODOS_CREATED_AT_INDEX, 'CreatedAtIndex'}
    ATTACHMENT_S3_BUCKET: ${env:ATTACHMENT_S3_BUCKET, 'serverless-c4-todo-images-dev'}
    SIGNED_URL_EXPIRATION: ${env:SIGNED_URL_EXPIRATION, '300'}

  logs:
    # Enable API Gateway logs
    restApi: true

  # https://www.npmjs.com/package/serverless-iam-roles-per-function
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

package:
  individually: true

custom:
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  # https://www.serverless.com/plugins/serverless-iam-roles-per-function
  serverless-iam-roles-per-function:
    defaultInherit: true

functions:
  Auth:
    name: tahina-todo-auth-${sls:stage}
    handler: src/lambda/auth/auth0Authorizer.handler
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    name: tahina-todo-list-${sls:stage}
    handler: src/lambda/http/getTodos.handler
    # TODO: for all functions here
    # environment:
    #   API_KEY: ${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_dynamodb_specific-table.html
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    name: tahina-todo-create-${sls:stage}
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_dynamodb_specific-table.html
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateTodo:
    name: tahina-todo-update-${sls:stage}
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_dynamodb_specific-table.html
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    name: tahina-todo-delete-${sls:stage}
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true
    # https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_dynamodb_specific-table.html
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    name: tahina-todo-generateUploadUrl-${sls:stage}
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"

  
  UpdateAttachmentUrl:
    name: tahina-todo-updateAttachmentUrl-${sls:stage}
    handler: src/lambda/http/updateAttachmentUrl.handler
    events:
      - s3:
          bucket: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
          event: s3:ObjectCreated:*
          # https://www.serverless.com/framework/docs/providers/aws/events/s3/
          existing: true
    # https://www.serverless.com/blog/aws-lambda-provisioned-concurrency
    provisionedConcurrency: 5
    # https://www.serverless.com/plugins/serverless-iam-roles-per-function
    iamRoleStatementsInherit: true
    # https://www.serverless.com/plugins/serverless-plugin-tracing
    tracing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          # - s3:GetObjectVersion
          # - s3:ListBucket
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # RequestBodyValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: 'request-body-validator'
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     ValidateRequestBody: true
    #     ValidateRequestParameters: false

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
